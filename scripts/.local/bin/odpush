#!/bin/sh

# This script first mirrors some files and directories into the local
# ~/OneDrive/Sync directory, and then mirrors the contents of that dir
# to the remote OneDrive/Sync directory.
# 
# DEPENDENCIES
# - OneDrive Client for Linux (https://github.com/abraunegg/onedrive)

# List of absolute paths to send to OneDrive
# You can optionally specify target path, e.g.
#   ~/Documents
# will drop all contents to "$odroot/Documents",
# however
#   ~/Documents Papers
# will drop all contents to "$odroot/Papers"
sourcelist="$HOME/.config/odpush.list"

# This represents the remote OneDrive root directory
odroot="$HOME/OneDrive"

# This holds the output of the last onedrive command
log="$HOME/.cache/odpush-latest.log"

# Argument 1: source path (follows rsync's trailing slash convention)
# Argument 2: target path (relative to $odroot/Sync)
# The data will be saved inside the Sync directory on OneDrive
push () {
    [ $# -ne 2 ] && echo "odpush: push: invalid number of arguments" && return 1
    src="$1" dest="Sync/$2"
    [ ! -d "$src" ] && [ ! -f "$src" ] && echo "odpush: push: invalid path $(tput setaf 1)$src$(tput setaf 7)" >&2 && return 1
    [ -n "$dest" ] && [ ! -d "$odroot/$dest" ] && mkdir -p -- "$odroot/$dest"
    printf "\b%s\n" "$(tput bold)Synchronizing $(tput setaf 2)$src$(tput setaf 7) to $(tput setaf 3)$odroot/$dest$(tput setaf 7)...$(tput sgr0)"
    rsync -vuctr --delete -- "$src" "$odroot/$dest"
    printf "\n%s\n" "$(tput bold)Uploading $(tput setaf 2)$src$(tput setaf 7) to $(tput setaf 3)/$dest$(tput setaf 7)...$(tput sgr0)"
    onedrive --synchronize --upload-only --single-directory "$dest" 2>&1 | tee "$log"
    grep -q 'ERROR' "$log" && notify-send -u critical "odpush" "An error occurred while uploading to OneDrive.\nSee <b>$(printf "%s" "$log" | sed "s/\/home\/[^/]*/\~/")</b>\nfor more information."
}

[ ! -f "$sourcelist" ] && echo "odpush: sources list file not found" >&2 && exit 1

while read -r line; do
    # Strip comments
    line="$(printf "%s\n" "$line" | sed 's/#.*//')"

    # Convert tilde to $HOME
    line="$(printf "%s\n" "$line" | sed "s/^\~/$(printf "%s\n" "$HOME" | sed 's|/|\\/|g')/g")"

    # If there's a path left, push it
    if [ -n "$line" ]; then
        # Extract source and target paths (target path is optional)
        spath="$(printf "%s" "$line" | awk '{ print $1 }')"
        tpath="$(printf "%s" "$line" | awk '{ print $2 }')"
        printf "SRC: %s DEST: %s" "$spath" "$tpath"
        [ -z "$tpath" ] && tpath="$(basename -- "$spath")"
        if [ -d "$spath" ]; then
            push "$spath" "$tpath"
        else
            printf "odpush: directory '%s' does not exist (skipping)\n" "$line" >&2
        fi
    fi
done <"$sourcelist"

