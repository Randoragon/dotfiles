#!/bin/sh

# This script is meant to simplify the process of adding new songs to my live streaming music playlist.
# Given a list of files, it will scan their metadata and poll the user for missing values or offer
# to overwrite the old ones. It will also optionally add them to the Fair Use m3u playlist.
#
# FRAMES CHEATSHEET
# - TPE1:              artist name
# - TIT2:              song title
# - TCOP:              name of the license (Creative Commons, Royalty Free, etc.)
# - COMM [license]:    written non-public justification for claimed TCOP license
# - WXXX [license]:    URL to license terms
# - WXXX [origin]:     URL to a playable media
# - WXXX [website1]:   URL to the artist's website [1]
# - COMM [website1]:   short name for website [1]
# - WXXX [website2]:   URL to the artist's website [2]
# - COMM [website2]:   short name for website [2]
#
# DEPENDENCIES
# - id3ted

[ $# -eq 0 ] && echo "addfairuse: At least one argument required." >&2 && exit 1

# Handle multiple arguments
[ $# -gt 1 ] && {
    for f in "$@"; do
        "$0" "$f"
    done
    exit
}

f="$1"
[ ! -f "$f" ] || [ "$(expr "$f" : '.*\.mp3$')" = 0 ] && echo "addfairuse: the input must be a path to an mp3 file" && exit 1

playlist="$HOME/Music/Playlists/Fair Use.m3u"

# Colors
FG=7 # normal foreground
BG=0 # normal background
HFG=8 # header foreground
HBG=0 # header background
EFG=1 # error foreground
EBG=0 # error background
QFG=3 # question foreground
QBG=0 # question background
CFG=4 # change type  foreground
AFG=6 # change arrow foreground
NFG=12 # change value foreground
header () { printf "\n%s\n" "$(tput setaf "$HFG" && tput setab "$HBG")$*$(tput setaf "$FG" && tput setab "$BG")"; }
info () { printf "%s\n" "  $*"; }
question () { printf "%s" "  $(tput bold && tput setaf "$QFG" && tput setab "$QBG")$*$(tput setaf "$FG" && tput setab "$BG" && tput sgr0)"; }
error () { printf "%s\n" "  $(tput setaf "$EFG" && tput setab "$EBG")$*$(tput setaf "$FG" && tput setab "$BG")" >&2; }

# Extract relevant tag information
frames="$(id3ted -l -- "$f")"

# Set up some global variables
skip_license=1
skip_license_url=1
skip_comment=1
skip_media_url=1
skip_website1_url=1
skip_website1_name=1
skip_website2_url=1
skip_website2_name=1

header "TPE1 FRAME - artist"
# In case of remixes, the arranger counts as artist
# In case of classical music, the composer counts as artist
# The performer can be included in the title like so:
# "title (performed by XYZ)"
if ! printf "%s" "$frames" | grep -q "^TPE1: "; then
    info "No artist found. Please ensure basic metadata exists (artist, title)."
    exit 1
else
    info "Found artist: '$(printf "%s" "$frames" | sed -n 's/^TPE1: //p')'"
fi

header "TIT2 FRAME - title"
if ! printf "%s" "$frames" | grep -q "^TIT2: "; then
    info "No title found. Please ensure basic metadata exists (artist, title)."
    exit 1
else
    info "Found title: '$(printf "%s" "$frames" | sed -n 's/^TIT2: //p')'"
fi

header "TCOP FRAME - copyright license"
if ! printf "%s" "$frames" | grep -q "^TCOP: "; then
    info "No license found."
    question "Input license: "
    read -r license
    if [ -n "$license" ]; then
        skip_license=0
        info "Input registered successfully."
    else info "No input. Skipping."; fi
else
    info "Found license: '$(printf "%s" "$frames" | sed -n 's/^TCOP: //p')'"
    question "Is this correct? [Y/n] "
    read -r ans
    [ -z "$ans" ] || [ "$ans" = y ] || [ "$ans" = Y ] || {
        question "Input new license: "
        read -r license
        if [ -n "$license" ]; then
            skip_license=0
            info "Input registered successfully."
        else info "No input. Skipping."; fi
    }
fi

header "WXXX FRAME - license terms URL"
# Each file can contain an arbitrary number of URLs,
# a URL frame consists of the URL and a description (the last one is optional).
desc="license"
if ! printf "%s" "$frames" | grep -q "^WXXX: \[$desc\]"; then
    info "No URL with \"$desc\" in description found."
    links="$(printf "%s" "$frames" | sed -n 's/^WXXX: //p')"
    [ -n "$links" ] && info "Existing URLs:" && info "$(printf "%s" "$links" | sed '1s/^/  /;2,$s/^/    /')"
    question "Input URL: "
    read -r license_url
    if [ -n "$license_url" ]; then
        skip_license_url=0
        info "Input registered successfully."
    else info "No input. Skipping."; fi
else
    info "Found URL: '$(printf "%s" "$frames" | sed -n "s/^WXXX: \[$desc\]: //p")'"
    question "Is this correct? [Y/n] "
    read -r ans
    [ -z "$ans" ] || [ "$ans" = y ] || [ "$ans" = Y ] || {
        links="$(printf "%s" "$frames" | sed -n 's/^WXXX: //p')"
        [ -n "$links" ] && info "Existing URLs:" && info "$(printf "%s" "$links" | sed '1s/^/  /;2,$s/^/    /')"
        question "Input new URL: "
        read -r license_url
        if [ -n "$license_url" ]; then
            skip_license_url=0
            info "Input registered successfully."
        else info "No input. Skipping."; fi
    }
fi

header "COMM FRAME - license justification"
# Each file can contain an arbitrary number of comments,
# a comment frame consists of the comment, description and language (last two are optional).
desc="license"
if ! printf "%s" "$frames" | grep -q "^COMM: \[$desc\]"; then
    info "No comment with \"$desc\" in description found."
    possible="$(printf "%s" "$frames" | sed -n '/^COMM: \[\](eng): /,$p;' | sed '1s/^COMM: \[\](eng): //;/^[A-Z]\{4\}: /q' | sed '${/^[A-Z]\{4\}: /d}')"
    if [ -n "$possible" ]; then
        printf "%s\n" "  $(tput setaf 9)$(printf "%s" "$possible" | sed '1s/^/  /;2,$s/^/    /')$(tput setaf "$FG")"
        question "Does this look like the correct value? [Y/n] "
        read -r ans
        [ -z "$ans" ] || [ "$ans" = y ] || [ "$ans" = Y ] && {
            comment="$possible"
            skip_comment=0
            info "Value registered successfully."
        }
    else
        tmp="$(mktemp -p /tmp addfairuse.XXXXXX)"
        info "Opening a temporary file '$tmp'..."
        sleep 1
        {
            printf "\n%s\n" "# No comment with \"$desc\" in description found."
            printf "%s\n" "# Enter the desired comment value. Leave empty to skip."
            printf "%s\n" "# (the \` character is reserved as a delimiter for id3ted)"
            printf "%s\n" "# "
        } >>"$tmp"
        id3ted -l "$f" | sed 's/^/#   /' >>"$tmp"
        "$EDITOR" -- "$tmp"
        comment="$(sed '/^#/d ; s/`/'"'"'/g' "$tmp")"
        if [ -n "$comment" ]; then
            skip_comment=0
            info "Input registered successfully."
        else info "Comment file empty. Skipping."; fi
        rm -- "$tmp"
    fi
else
    info "Comment with description \"$desc\" already exists."
    question "Edit anyway? [y/N] "
    read -r ans
    [ "$ans" = y ] || [ "$ans" = Y ] && {
        oldcomment="$(printf "%s" "$frames" | sed -n '/^COMM: \[$desc\]/,$p;' | sed "1s/^COMM: \[$desc\]([^)]*): //;/^[A-Z]\{4\}: /q" | sed '${/^[A-Z]\{4\}: /d}')"
        tmp="$(mktemp -p /tmp addfairuse.XXXXXX)"
        info "Opening a temporary file '$tmp'..."
        {
            printf "%s\n" "$oldcomment"
            printf "%s\n" "# Make any edits you like. Leave empty to skip."
            printf "%s\n" "# (the \` character is reserved as a delimiter for id3ted)"
            printf "%s\n" "# "
        } >>"$tmp"
        id3ted -l "$f" | sed 's/^/#   /' >>"$tmp"
        "$EDITOR" -- "$tmp"
        comment="$(sed '/^#/d ; s/`/'"'"'/g' "$tmp")"
        if [ "$oldcomment" != "$comment" ]; then
            skip_comment=0
            info "Input registered successfully."
        else info "No changes made. Skipping."; fi
        rm -- "$tmp"
    }
fi

header "WXXX FRAME - playable media URL"
desc="origin"
if ! printf "%s" "$frames" | grep -q "^WXXX: \[$desc\]"; then
    info "No URL with \"$desc\" in description found."
    links="$(printf "%s" "$frames" | sed -n 's/^WXXX: //p')"
    [ -n "$links" ] && info "Existing URLs:" && info "$(printf "%s" "$links" | sed '1s/^/  /;2,$s/^/    /')"
    question "Input URL: "
    read -r media_url
    if [ -n "$media_url" ]; then
        skip_media_url=0
        info "Input registered successfully."
    else info "No input. Skipping."; fi
else
    info "Found URL: '$(printf "%s" "$frames" | sed -n "s/^WXXX: \[$desc\]: //p")'"
    question "Is this correct? [Y/n] "
    read -r ans
    [ -z "$ans" ] || [ "$ans" = y ] || [ "$ans" = Y ] || {
        links="$(printf "%s" "$frames" | sed -n 's/^WXXX: //p')"
        [ -n "$links" ] && info "Existing URLs:" && info "$(printf "%s" "$links" | sed '1s/^/  /;2,$s/^/    /')"
        question "Input new URL: "
        read -r media_url
        if [ -n "$media_url" ]; then
            skip_media_url=0
            info "Input registered successfully."
        else info "No input. Skipping."; fi
    }
fi

header "WXXX FRAME - artist website #1 URL"
desc="website1"
if ! printf "%s" "$frames" | grep -q "^WXXX: \[$desc\]"; then
    info "No URL with \"$desc\" in description found."
    links="$(printf "%s" "$frames" | sed -n 's/^WXXX: //p')"
    [ -n "$links" ] && info "Existing URLs:" && info "$(printf "%s" "$links" | sed '1s/^/  /;2,$s/^/    /')"
    question "Input URL: "
    read -r website1_url
    if [ -n "$website1_url" ]; then
        skip_website1_url=0
        info "Input registered successfully."
    else info "No input. Skipping."; fi
else
    info "Found URL: '$(printf "%s" "$frames" | sed -n "s/^WXXX: \[$desc\]: //p")'"
    question "Is this correct? [Y/n] "
    read -r ans
    [ -z "$ans" ] || [ "$ans" = y ] || [ "$ans" = Y ] || {
        links="$(printf "%s" "$frames" | sed -n 's/^WXXX: //p')"
        [ -n "$links" ] && info "Existing URLs:" && info "$(printf "%s" "$links" | sed '1s/^/  /;2,$s/^/    /')"
        question "Input new URL: "
        read -r website1_url
        if [ -n "$website1_url" ]; then
            skip_website1_url=0
            info "Input registered successfully."
        else info "No input. Skipping."; fi
    }
fi

header "COMM FRAME - artist website #1 name"
desc="website1"
info "website #1 URL: $website1_url"
if ! printf "%s" "$frames" | grep -q "^COMM: \[$desc\]"; then
    info "No comment with \"$desc\" in description found."
    question "Input website #1 name: "
    read -r website1_name
    if [ -n "$website1_name" ]; then
        skip_website1_name=0
        info "Input registered successfully."
    else info "No input. Skipping."; fi
else
    info "Found comment: '$(printf "%s" "$frames" | sed -n "s/^COMM: \[$desc\](\([^)]*\))\?: //p")'"
    question "Is this correct? [Y/n] "
    read -r ans
    [ -z "$ans" ] || [ "$ans" = y ] || [ "$ans" = Y ] || {
        question "Input website #1 name: "
        read -r website1_name
        if [ -n "$website1_name" ]; then
            skip_website1_name=0
            info "Input registered successfully."
        else info "No input. Skipping."; fi
    }
fi

header "WXXX FRAME - artist website #2 URL"
desc="website2"
if ! printf "%s" "$frames" | grep -q "^WXXX: \[$desc\]"; then
    info "No URL with \"$desc\" in description found."
    links="$(printf "%s" "$frames" | sed -n 's/^WXXX: //p')"
    [ -n "$links" ] && info "Existing URLs:" && info "$(printf "%s" "$links" | sed '1s/^/  /;2,$s/^/    /')"
    question "Input URL: "
    read -r website2_url
    if [ -n "$website2_url" ]; then
        skip_website2_url=0
        info "Input registered successfully."
    else info "No input. Skipping."; fi
else
    info "Found URL: '$(printf "%s" "$frames" | sed -n "s/^WXXX: \[$desc\]: //p")'"
    question "Is this correct? [Y/n] "
    read -r ans
    [ -z "$ans" ] || [ "$ans" = y ] || [ "$ans" = Y ] || {
        links="$(printf "%s" "$frames" | sed -n 's/^WXXX: //p')"
        [ -n "$links" ] && info "Existing URLs:" && info "$(printf "%s" "$links" | sed '1s/^/  /;2,$s/^/    /')"
        question "Input new URL: "
        read -r website2_url
        if [ -n "$website2_url" ]; then
            skip_website2_url=0
            info "Input registered successfully."
        else info "No input. Skipping."; fi
    }
fi

header "COMM FRAME - artist website #2 name"
desc="website2"
info "website #2 URL: $website2_url"
if ! printf "%s" "$frames" | grep -q "^COMM: \[$desc\]"; then
    info "No comment with \"$desc\" in description found."
    question "Input website #1 name: "
    read -r website2_name
    if [ -n "$website2_name" ]; then
        skip_website2_name=0
        info "Input registered successfully."
    else info "No input. Skipping."; fi
else
    info "Found comment: '$(printf "%s" "$frames" | sed -n "s/^COMM: \[$desc\](\([^)]*\))\?: //p")'"
    question "Is this correct? [Y/n] "
    read -r ans
    [ -z "$ans" ] || [ "$ans" = y ] || [ "$ans" = Y ] || {
        question "Input website #1 name: "
        read -r website2_name
        if [ -n "$website2_name" ]; then
            skip_website2_name=0
            info "Input registered successfully."
        else info "No input. Skipping."; fi
    }
fi

header "WRITE CHANGES TO FILE"
total="$((8 - skip_license - skip_license_url - skip_comment - skip_media_url - skip_website1_url - skip_website1_name - skip_website2_url - skip_website2_name))"
if [ "$total" -gt 0 ]; then
    info "The following edits will be applied:"
    [ "$skip_license" = 0 ]      && info "- $(tput setaf "$CFG")license$(tput setaf "$AFG")         => $(tput setaf "$NFG")'$license'"
    [ "$skip_license_url" = 0 ]  && info "- $(tput setaf "$CFG")license url$(tput setaf "$AFG")     => $(tput setaf "$NFG")'$license_url'"
    [ "$skip_comment" = 0 ]      && info "- $(tput setaf "$CFG")comment$(tput setaf "$FG")"
    [ "$skip_media_url" = 0 ]    && info "- $(tput setaf "$CFG")media url$(tput setaf "$AFG")       => $(tput setaf "$NFG")'$media_url'"
    [ "$skip_website1_url" = 0 ] && info "- $(tput setaf "$CFG")website #1 url$(tput setaf "$AFG")  => $(tput setaf "$NFG")'$website1_url'"
    [ "$skip_website1_url" = 0 ] && info "- $(tput setaf "$CFG")website #1 name$(tput setaf "$AFG") => $(tput setaf "$NFG")'$website1_name'"
    [ "$skip_website1_url" = 0 ] && info "- $(tput setaf "$CFG")website #2 url$(tput setaf "$AFG")  => $(tput setaf "$NFG")'$website2_url'"
    [ "$skip_website1_url" = 0 ] && info "- $(tput setaf "$CFG")website #2 name$(tput setaf "$AFG") => $(tput setaf "$NFG")'$website2_name'"
    echo ""
    question "Proceed with these changes? [Y/n] "
    read -r ans
    [ -z "$ans" ] || [ "$ans" = y ] || [ "$ans" = Y ] && {
        [ "$skip_license"       = 0 ] && info "Writing license..."         && id3ted --TCOP "$license" -- "$f"
        [ "$skip_license_url"   = 0 ] && info "Writing license URL..."     && id3ted -d \` --WXXX "$license_url\`license" -- "$f"
        [ "$skip_comment"       = 0 ] && info "Writing comment..."         && id3ted -d \` --COMM "$comment\`license" -- "$f"
        [ "$skip_media_url"     = 0 ] && info "Writing media URL..."       && id3ted -d \` --WXXX "$media_url\`origin" -- "$f"
        [ "$skip_website1_url"  = 0 ] && info "Writing website #1 URL..."  && id3ted -d \` --WXXX "$website1_url\`website1" -- "$f"
        [ "$skip_website1_name" = 0 ] && info "Writing website #1 name..." && id3ted -d \` --COMM "$website1_name\`website1" -- "$f"
        [ "$skip_website2_url"  = 0 ] && info "Writing website #2 URL..."  && id3ted -d \` --WXXX "$website2_url\`website2" -- "$f"
        [ "$skip_website2_name" = 0 ] && info "Writing website #2 name..." && id3ted -d \` --COMM "$website2_name\`website2" -- "$f"
        info "Finished writing to '$f'"
    }
else info "No changes made."; fi

header "ADD TO PLAYLIST"
question "Add to \"$(basename -- "$playlist")\"? [Y/n] "
read -r ans
[ -z "$ans" ] || [ "$ans" = y ] || [ "$ans" = Y ] && {
    if pladd "$playlist" "$(realpath -- "$f")"; then
        info "Successfully added."
    else
        error "Failed to add to playlist."
    fi
}

header "ALL FINISHED"

