#!/bin/sh

# This script reads a TSV file which stores the play counts
# for individual songs (this file is created by ncmpcpp) and
# outputs the N least or most frequent ones to a .Rare playlist.
#
# Usage:
#    plrare [N]
# where N is the number of songs to output.
# If N is positive, then the N least played songs will be output.
# If N is negative, then the -N most played songs will be output.
#
# Other usage:
#    plrare bump PATH [N]
#    plrare bump PLAYLIST [N]
# where PATH is a path to either a song file, a directory or a
# playlist, relative to musicdir.
# This increases the playcount of PATH by N. In the case of a
# directory or a playlist, all songs contained within get incremented.
# If N is not provided, 1 is the default. If any song's playcount
# drops below 0 as a result of applying N, it is removed from the
# playcount file. "/" can be used instead of PLAYLIST to bump all songs in
# MPD's current playlist.
#
# If N is omitted, the playcount file is opened in a pager instead.

musicdir=~/Music
playlistdir="$musicdir"/Playlists
countfile="$musicdir"/playcount.tsv
playlist="$playlistdir"/.Rare.m3u

[ ! -f "$countfile" ] && : >"$countfile"
[ $# -lt 1 ] && ${PAGER:-less} -- "$countfile" && exit

[ "$1" = bump ] && {
    shift
    file="$1"
    [ -n "$2" ] && N=$(($2)) || N=1
    [ "$file" = ^ ] && {
        mpc playlist -f %file% | while read -r line; do
            $0 bump "$line" "$N"
        done
        exit
    }
    if [ -f "$musicdir/$file" ]; then
        if [ "${file##*.}" = m3u ] || [ "$(xdg-mime query filetype "$musicdir/$file")" = 'text/plain' ]; then
            # Bump a playlist
            while read -r line; do
                $0 bump "$line" "$N"
            done <"$musicdir/$file"
        else
            # Bump a file
            val="$(grep -Fn -- "$file" "$countfile")"
            if [ -z "$val" ]; then
                [ "$N" -le 0 ] && exit
                printf '%s\t%s\n' "$N" "$file" >>"$countfile"
            else
                lineno="${val%%:*}"
                val="${val%%	*}"
                val="${val##*:}"
                val=$((val + N))
                if [ "$val" -le 0 ]; then
                    sed -i "${lineno}d" -- "$countfile"
                else
                    sed -i "${lineno}s/^[0-9]*\t/${val}\t/" -- "$countfile"
                fi
            fi
        fi
    elif [ -d "$musicdir/$file" ]; then
        # Bump a directory
        find "$musicdir/$file" -maxdepth 1 -type f | while read -r f; do
            mime="$(xdg-mime query filetype "$f")"
            [ "${mime%%/*}" = audio ] && $0 bump "$(realpath --relative-to "$musicdir" -- "$f")" "$N"
        done
    fi
    exit
}

# Validate and store argument
N=$(($1))

# Populate a temporary ranking file
tmp1="$(mktemp plrare.XXXXX)"
tmp2="$(mktemp plrare.XXXXX)"

# Reformat from "count\tsong" to "song\tcount"
while read -r line; do
    song="${line#*	}"
    count="${line%%	*}"
    printf '%s\t%s\n' "$song" "$count" >>"$tmp1"
done <"$countfile"

# Generate list of all songs with 0 counts (in "song\tcount" format),
# THEN join with the reformatted legitimate list,
# THEN sort to get the same songs next to each other in descending order,
# THEN reformat everything from "song\tcount" to "count\tsong",
# THEN pass it through `uniq -f1` to get rid of duplicates,
# THEN sort by play count.
# Whew. I should really rewrite this in a scripting language
# that has native hashsets, this is terrible performance.
mpc listall --format %file% | while read -r line; do
    printf '%s\t0\n' "$line"
done | cat "$tmp1" - | sort -nr | while read -r line; do
    song="${line%	*}"
    count="${line##*	}"
    printf '%s\t%s\n' "$count" "$song"
done | uniq -f1 | sort -no "$tmp2"
rm -f -- "$tmp1"

# Output first or last N lines, depending on N's sign
if [ "$N" -ge 0 ]; then
    lines="$(head -n$N -- "$tmp2")"
else
    lines="$(tail -n${N#-} -- "$tmp2" | tac)"
fi
rm -f -- "$tmp2"
echo "$lines"
echo "$lines" | cut -f2 >"$playlist"
