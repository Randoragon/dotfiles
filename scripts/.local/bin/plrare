#!/bin/sh

# This script is used to manage, parse and display playcounts from my music
# library. To be precise, it can:
#   (1) increase/decrease the play count of songs
#   (2) output playlists of least/most played songs
#   (3) calculate and print some data about the played songs
#
# Usage:
#    plrare [+N|-N]
# where N is the number of songs to output.
# If prefixed with '+', the N least played songs will be output.
# If prefixed with '-', the N most played songs will be output.
#
# Other usage:
#     plrare [N]
#     plrare .
# If run with no arguments, the current playcount file is opened in the pager.
# If a number N is given, the last N playcount files are merged and opened in
# the pager, including files with 0 plays.
# If run with '.', all playcount files are merged and opened in the pager,
# including files with 0 plays. This is equivalent to choosing a high enough N.
#
# Other usage:
#    plrare bump PATH [N]
#    plrare bump PLAYLIST [N]
# where PATH is a path to either a song file, a directory or a
# playlist, relative to musicdir.
# This increases the playcount of PATH by N. In the case of a
# directory or a playlist, all songs contained within get incremented.
# If N is not provided, 1 is the default. If any song's playcount
# drops below 0 as a result of applying N, it is removed from the
# playcount file. "^" can be used instead of PLAYLIST to bump all songs in
# MPD's current playlist.
#
# Other usage:
#    plrare stats [FILE...]
#    plrare stats N
#    plrare stats .
# Tallies up the total listening time and prints it out. Requires mp3info.
# If FILEs are given, tallies up only the data from those files.
# If an integer N is given, tallies up only the data from the last N months.
# If . is passed, the stats for all files are read.
# With no arguments, the most recent month is read (equiv. to N=1).

musicdir=~/Music
playlistdir="$musicdir"/Playlists
countdir="$musicdir"/.playcount
countfile="$countdir/$(date +%Y-%m).tsv"
playlist="$playlistdir"/.Rare.m3u

# External lua script for quick merging of playcount files
lua_merge=~/.scripts/plrare_merge.lua

# External lua script for generating playlist order
lua_order=~/.scripts/plrare_order.lua

library () {
    if mpc status >/dev/null 2>&1; then
        mpc listall --format %file%
    else
        find "$musicdir" -type f -name '*.mp3' -print0 | xargs -0 realpath --relative-to "$musicdir" --
    fi
}

mkdir -p -- "$countdir"
[ ! -f "$countfile" ] && : >"$countfile"
[ $# -lt 1 ] && ${PAGER:-less} -- "$countfile" && exit

[ "$1" = . ] && {
    tmp="$(mktemp --tmpdir plrare.XXXXX)"
    library | sed 's/^/0\t/' >"$tmp"
    lines="$(find "$countdir" -type f -print0 | xargs -0 $lua_merge "$tmp" | sort -k 1nr,2)"
    echo "$lines" >"$tmp"
    ${PAGER:-less} -- "$tmp"
    rm -f -- "$tmp"
    exit
}

[ "$(expr "$1" : '[0-9]\+' 2>/dev/null)" -ne 0 ] && {
    tmp="$(mktemp --tmpdir plrare.XXXXX)"
    library | sed 's/^/0\t/' >"$tmp"
    lines="$(find "$countdir" -type f | sort | tail -n"$1" | xargs $lua_merge "$tmp" | sort -k 1nr,2)"
    echo "$lines" >"$tmp"
    ${PAGER:-less} -- "$tmp"
    rm -f -- "$tmp"
    exit
}

[ "$1" = bump ] && {
    shift
    file="$1"
    [ -n "$2" ] && N=$(($2)) || N=1
    [ "$file" = ^ ] && {
        mpc playlist -f %file% | while read -r line; do
            $0 bump "$line" "$N"
        done
        exit
    }
    if [ -f "$musicdir/$file" ]; then
        if [ "${file##*.}" = m3u ] || [ "$(xdg-mime query filetype "$musicdir/$file")" = 'text/plain' ]; then
            # Bump a playlist
            while read -r line; do
                $0 bump "$line" "$N"
            done <"$musicdir/$file"
        else
            # Bump a file
            val="$(grep -Fn -- "$file" "$countfile")"
            if [ -z "$val" ]; then
                [ "$N" -le 0 ] && exit
                printf '%s\t%s\n' "$N" "$file" >>"$countfile"
            else
                lineno="${val%%:*}"
                val="${val%%	*}"
                val="${val##*:}"
                val=$((val + N))
                if [ "$val" -le 0 ]; then
                    sed -i "${lineno}d" -- "$countfile"
                else
                    sed -i "${lineno}s/^[0-9]*\t/${val}\t/" -- "$countfile"
                fi
            fi
        fi
    elif [ -d "$musicdir/$file" ]; then
        # Bump a directory
        find "$musicdir/$file" -maxdepth 1 -type f -name '*.mp3' | while read -r f; do
            $0 bump "$(realpath --relative-to "$musicdir" -- "$f")" "$N"
        done
    else
        printf 'No such file or directory: %s\n' "$musicdir/$file" >&2
    fi
    exit
}

[ "$1" = stats ] && {
    tmp="$(mktemp --tmpdir plrare.XXXXX)"
    if [ "$2" = . ]; then
        find "$countdir" -type f -print0 | xargs -0 $lua_merge >"$tmp"
        echo '-- GLOBAL STATS --'
    elif [ "$(expr "$2" : '[1-9]\+' 2>/dev/null)" -ne 0 ]; then
        find "$countdir" -type f | sort | tail -n"$2" | xargs $lua_merge >"$tmp"
        printf -- '-- %d-MONTHLY STATS --\n' "$2"
    elif [ $# -gt 1 ]; then
        shift
        $lua_merge "$@" >"$tmp"
        echo '-- SELECTED STATS --'
    else
        echo '-- MONTHLY STATS --'
        $lua_merge "$countfile" >"$tmp"
    fi
    lua -- ~/.scripts/plrare_stats.lua "$(library | wc -l)" <"$tmp"
    rm -f -- "$tmp"
    exit
}

# Validate and store argument
N=$(($1))

# Merge all playcounts into one
tmp="$(mktemp --tmpdir plrare.XXXXX)"
find "$countdir" -type f -print0 | xargs -0 $lua_merge >"$tmp"

# Output first or last N lines, depending on N's sign
if [ "$N" -ge 0 ]; then
    lines="$(library | $lua_order "$tmp" | head -n$N)"
else
    lines="$(library | $lua_order "$tmp" | tail -n${N#-} | tac)"
fi
rm -f -- "$tmp"
echo "$lines"
echo "$lines" | cut -f2 >"$playlist"
