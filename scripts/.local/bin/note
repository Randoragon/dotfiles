#!/usr/bin/sh

# Wrapper script for storing markup notes in pass.
# See "note -h" for more details.
#
# Dependencies:
# - gpg, md5sum
# - dmenu, fzf
# - md2html (md4c)
# - groff (+mom macros)
# - neatroff (+ms, mm, rnd macros)
# - surf (html viewing)
# - env: $PDF_READER (fallback to zathura)
# - ntmake (my script for quick neatroff compilation)
# - git
#
# For neatroff rnd macros see https://github.com/randoragon/tmac-rnd

# CONFIG
notedir="${XDG_DATA_HOME:-~/.local/share}/notes"
gpgid="$notedir/.gpg-id"

help () {
    printf "\
Usage:
    note [OPTIONS] [NAME]

    Without the NAME argument, note will let you select a note for
    viewing with either dmenu or fzf.
    To create a new note, pass the NAME argument (without extension).

Options:
    -e, --edit
        Open note for editing instead of viewing. This implies that
        the note already exists (NAME cannot be passed).

    -d, --markdown
        Create a markdown note instead of plain text. This option
        is only allowed when creating a new note by passing NAME.

    -r, --neat-rnd
        Create a neatroff-rnd note instead of plain text. This option
        is only allowed when creating a new note by passing NAME.
        (most preprocessors are available)

    -m, --neat-mm
        Create a neatroff-mm note instead of plain text. This option
        is only allowed when creating a new note by passing NAME.
        (most preprocessors are available)

    -s, --neat-ms
        Create a neatroff-ms note instead of plain text. This option
        is only allowed when creating a new note by passing NAME.
        (most preprocessors are available)

    -o, --groff-mom
        Create a groff-mom note instead of plain text. This option
        is only allowed when creating a new note by passing NAME.
        (tbl and eqn preprocessors are available)

    -t, --textonly
        View any markup note as plain text.

    -h, --help
        Display this help text.

"
}

edit () {
    [ ! -r "$gpgid" ] && echo "note: .gpg-id file not found, aborting." >&2 && exit 3
    ext="${1##*.}"
    tmp="$(mktemp --tmpdir "note.XXXXX.$ext")"
    sum=
    chmod 600 -- "$tmp"
    if [ -z "$2" ]; then
        gpg --yes --quiet --decrypt --output "$tmp" -- "$notedir/$1"
    else
        cp -- "$notedir/$1" "$tmp"
    fi
    sum="$(md5sum -- "$tmp")"
    if [ -z "$interactive" ]; then
        st -e "$EDITOR" "$tmp"
    else
        "$EDITOR" "$tmp"
    fi
    if [ "$(md5sum -- "$tmp")" = "$sum" ]; then
        printf "No changes were made, skipping.\n"
        [ -n "$2" ] && rm -- "$notedir/$1"
    else
        if [ $? ]; then
            gpg --yes --quiet --encrypt --recipient "$(cat -- "$gpgid")" --output "$notedir/$1" -- "$tmp"
            git -C "$notedir" add "$1"
            git -C "$notedir" commit -o "$1" -m "Edit $1"
        else
            printf "An error occurred while encrypting the note\n"
        fi
    fi
    shred -u -- "$tmp"
}

view () {
    ext="${1##*.}"
    fmt="$ext"
    [ -n "$textonly" ] && fmt=txt
    case "$fmt" in
        txt)
            if [ -z "$interactive" ]; then
                tmp="$(mktemp --tmpdir "note.XXXXX")"
                chmod 600 -- "$tmp"
                gpg --yes --quiet --decrypt --output "$tmp" -- "$notedir/$1"
                [ -s "$tmp" ] && st -e "$PAGER" -- "$tmp"
                shred -u -- "$tmp"
            else
                gpg --yes --quiet --decrypt --output - -- "$notedir/$1" | "$PAGER" -
            fi
            ;;
        md)
            tmp="$(mktemp --tmpdir "note.XXXXX.html")"
            chmod 600 -- "$tmp"
            printf "%s" "$HTML_TABLE_STYLE" >"$tmp"
            gpg --yes --quiet --decrypt --output - -- "$notedir/$1" | md2html --github >>"$tmp"
            [ -s "$tmp" ] && surf "file://$tmp"
            shred -u -- "$tmp"
            ;;
        rnd)
            gpg --yes --quiet --decrypt --output - -- "$notedir/$1" | ntmake -rnd | "${PDF_READER:-zathura}" -
            ;;
        ms)
            gpg --yes --quiet --decrypt --output - -- "$notedir/$1" | ntmake -ms | "${PDF_READER:-zathura}" -
            ;;
        mm)
            gpg --yes --quiet --decrypt --output - -- "$notedir/$1" | ntmake -mm | "${PDF_READER:-zathura}" -
            ;;
        mom)
            gpg --yes --quiet --decrypt --output - -- "$notedir/$1" | pdfmom -k -e -p -t | "${PDF_READER:-zathura}" -
            ;;
        *)
            printf "note: unknown note extension \"%s\"\n" "$ext" >&2
    esac
}

edit=
markdown=
neat_rnd=
neat_mm=
neat_ms=
groff_mom=
textonly=
opts="$(getopt -n note -s sh -o hedtrmso -l help,edit,markdown,textonly,neat-rnd,neat-mm,neat-ms,groff-mom -- "$@")"
eval set -- "$opts"
while true; do
    case "$1" in
        -h|--help) help ; exit ; shift ;;
        -e|--edit) edit=1 ; shift ;;
        -d|--markdown) markdown=1 ; shift ;;
        -r|--neat-rnd) neat_rnd=1 ; shift ;;
        -m|--neat-mm) neat_mm=1 ; shift ;;
        -s|--neat-ms) neat_ms=1 ; shift ;;
        -o|--groff-mom) groff_mom=1 ; shift ;;
        -t|--textonly) textonly=1 ; shift ;;
        --) shift ; break ;;
        *) break ;;
    esac
done

[ ! -d "$notedir" ] && echo "note: notes dir not found" >&2 && exit 1

# View/edit existing note
if [ $# -eq 0 ]; then
    [ -n "$markdown" ]  && echo "note: illegal use of --markdown option"  >&2 && exit 2
    [ -n "$neat_rnd" ]  && echo "note: illegal use of --neat-rnd option"  >&2 && exit 2
    [ -n "$neat_mm" ]   && echo "note: illegal use of --neat-mm option"   >&2 && exit 2
    [ -n "$neat_ms" ]   && echo "note: illegal use of --neat-ms option"   >&2 && exit 2
    [ -n "$groff_mom" ] && echo "note: illegal use of --groff-mom option" >&2 && exit 2

    # Check if shell is interactive. For interactive
    # shells use fzf, otherwise use dmenu.
    interactive=
    if [ -z "$edit" ]; then prompt="View Note:"; else prompt="Edit Note:"; fi
    if [ -t 0 ]; then
        note="$(find "$notedir" -type f -not -path '*/\.git*' -name '?*.?*' -print0 | xargs -0l realpath --relative-to "$notedir" | fzf --no-sort --no-multi --prompt "$prompt ")"
        interactive=1
    else
        note="$(find "$notedir" -type f -not -path '*/\.git*' -name '?*.?*' -print0 | xargs -0l realpath --relative-to "$notedir" | dmenu -F -l 5 -p "$prompt")"
    fi

    [ -z "$note" ] && exit
    if [ -z "$edit" ]; then
        view "$note"
    else
        edit "$note"
    fi

# Create new note
else
    [ -n "$textonly" ] && echo "note: illegal use of --textonly option" >&2 && exit 2
    [ -n "$edit" ] && echo "note: illegal use of --edit option" >&2 && exit 2
    fname="$*"
    [ -z "$(basename -- "$fname")" ] && echo "note: cannot create a note with empty filename" >&2 && exit 2

    # Only allow one markup language at a time
    expr \( "${markdown:-0}" + "${neat_rnd:-0}" + "${neat_mm:-0}" + "${neat_ms:-0}" + "${groff_mom:-0}" \) \> 1 >/dev/null && {
        echo "note: only one markup language may be specified at a time" >&2
        exit 2
    }

    ext=txt
    [ -n "$markdown" ]  && ext="md"
    [ -n "$neat_rnd" ]  && ext="rnd"
    [ -n "$neat_mm" ]   && ext="mm"
    [ -n "$neat_ms" ]   && ext="ms"
    [ -n "$groff_mom" ] && ext="mom"
    [ -f "$notedir/$fname.$ext" ] && echo "note: a note with the same name already exists" >&2 && exit
    mkdir -p "$notedir/$(dirname -- "$fname")"
    :>"$notedir/$fname.$ext"
    edit "$fname.$ext" 1
fi

