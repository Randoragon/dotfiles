# Set ZSH
# I need the read -q command
set shell zsh

# Enable icons
set icons

# Enable period refresh
set period 1

# Define file separator
set ifs "\n"

# Remap find-prev
map \\ :find-prev

# Map "Leader" key
map ,
map ,p :set preview!

# Trash and delete files
map x :trash
map X :delete
cmd trash ${{
    clear
    printf -- "$fx\n"
    printf -- "move to trash? [y/N] "
    read -q ans
    [ $ans = "y" -o $ans = "Y" ] && {
        printf -- "$fx\n" | while read l; do
            mv -- "$l" "$HOME/.local/share/Trash/files"
        done
    }
}} 

# Alternate selection bindings
map v :{{
    toggle
    up
}}
map <c-v> :invert

# Fuzzy Find
cmd fuzzy-find ${{
    match="$(find . -maxdepth 1 | fzf --bind=ctrl-d:half-page-down,ctrl-u:half-page-up)"
    if [ -n $match ]; then
        [ "$(expr "$(basename -- "$match")" : "^\..*")" -ne 0 ] && lf -remote "send $id set hidden"
        lf -remote "send $id select '$match'"
    fi
}}
cmd fuzzy-find-recursive ${{
    match="$(find . | fzf --bind=ctrl-d:half-page-down,ctrl-u:half-page-up)"
    if [ -n $match ]; then
        [ "$(expr "$(basename -- "$match")" : "^\..*")" -ne 0 ] && lf -remote "send $id set hidden"
        lf -remote "send $id cd '$(dirname -- "$match")'"
        lf -remote "send $id select '$(basename -- "$match")'"
    fi
}}
map o :fuzzy-find
map O :fuzzy-find-recursive

# Put to background
map <c-z> $ kill -STOP $PPID

# Bulk rename
cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    [ -z $fs ] && fs="$(ls)"
    printf "$fs\n" > "$old"
    printf "$fs\n" > "$new"
    "$EDITOR" "$new"
    [ "$(cat -- "$new" | wc -l)" -ne "$(cat -- "$old" | wc -l)" ] && exit
    paste "$old" "$new" | while read names; do
        src="$(printf -- "$names" | cut -f1)"
        dst="$(printf -- "$names" | cut -f2)"
        [ "$src" = "$dst" ] && continue
        [ -e "$dst" ] && continue
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}
map R :bulk-rename

# Print file information
cmd info !{{
    clear
    printf "\n Computing..."
    CONTENT="$(printf -- "$fx\n" | fls)"
    clear
    printf -- "\n$CONTENT"
}}
map I :info

# Create/Open archives
cmd tar ${{
    clear
    unset IFS
    FILE="$*"
    [ -z "$FILE" ] && lf -remote "send $id echo 'archive name required'" && exit
    [ -f "$FILE.tar" ] && {
        lf -remote "send $id echo 'a file with this name already exists'"
        exit
    } || [ -d "$FILE.tar" ] && {
        lf -remote "send $id echo 'a directory with this name already exists'"
        exit
    }
    printf -- "$fx\n" | mkar -vi -- "$FILE"
}}

cmd tar-gz ${{
    clear
    unset IFS
    FILE="$*"
    [ -z "$FILE" ] && lf -remote "send $id echo 'archive name required'" && exit
    [ -f "$FILE.tar.gz" ] && {
        lf -remote "send $id echo 'a file with this name already exists'"
        exit
    } || [ -d "$FILE.tar.gz" ] && {
        lf -remote "send $id echo 'a directory with this name already exists'"
        exit
    }
    printf -- "$fx\n" | mkar -vzi -- "$FILE"
}}

cmd tar-bz ${{
    clear
    unset IFS
    FILE="$*"
    [ -z "$FILE" ] && lf -remote "send $id echo 'archive name required'" && exit
    [ -f "$FILE.tar.bz" ] && {
        lf -remote "send $id echo 'a file with this name already exists'"
        exit
    } || [ -d "$FILE.tar.bz" ] && {
        lf -remote "send $id echo 'a directory with this name already exists'"
        exit
    }
    printf -- "$fx\n" | mkar -vji -- "$FILE"
}}

cmd tar-xz ${{
    clear
    unset IFS
    FILE="$*"
    [ -z "$FILE" ] && lf -remote "send $id echo 'archive name required'" && exit
    [ -f "$FILE.tar.xz" ] && {
        lf -remote "send $id echo 'a file with this name already exists'"
        exit
    } || [ -d "$FILE.tar.xz" ] && {
        lf -remote "send $id echo 'a directory with this name already exists'"
        exit
    }
    printf -- "$fx\n" | mkar -vJi -- "$FILE"
}}

cmd zip ${{
    clear
    unset IFS
    FILE="$*"
    [ -z "$FILE" ] && lf -remote "send $id echo 'archive name required'" && exit
    [ -f "$FILE.zip" ] && {
        lf -remote "send $id echo 'a file with this name already exists'"
        exit
    } || [ -d "$FILE.zip" ] && {
        lf -remote "send $id echo 'a directory with this name already exists'"
        exit
    }
    printf -- "$fx\n" | mkar -vZi -- "$FILE"
}}

cmd rar ${{
    clear
    unset IFS
    FILE="$*"
    [ -z "$FILE" ] && lf -remote "send $id echo 'archive name required'" && exit
    [ -f "$FILE.rar" ] && {
        lf -remote "send $id echo 'a file with this name already exists'"
        exit
    } || [ -d "$FILE.rar" ] && {
        lf -remote "send $id echo 'a directory with this name already exists'"
        exit
    }
    printf -- "$fx\n" | mkar -vri -- "$FILE"
}}

cmd jar ${{
    clear
    unset IFS
    FILE="$*"
    [ -z "$FILE" ] && lf -remote "send $id echo 'archive name required'" && exit
    [ -f "$FILE.jar" ] && {
        lf -remote "send $id echo 'a file with this name already exists'"
        exit
    } || [ -d "$FILE.jar" ] && {
        lf -remote "send $id echo 'a directory with this name already exists'"
        exit
    }
    printf -- "$fx\n" | mkar -vRi -- "$FILE"
}}

cmd 7z ${{
    clear
    unset IFS
    FILE="$*"
    [ -z "$FILE" ] && lf -remote "send $id echo 'archive name required'" && exit
    [ -f "$FILE.7z" ] && {
        lf -remote "send $id echo 'a file with this name already exists'"
        exit
    } || [ -d "$FILE.7z" ] && {
        lf -remote "send $id echo 'a directory with this name already exists'"
        exit
    }
    printf -- "$fx\n" | mkar -v7i -- "$FILE"
}}

cmd tar-m ${{
    clear
    unset IFS
    FILE="$*"
    [ -z "$FILE" ] && lf -remote "send $id echo 'archive name required'" && exit
    [ -f "$FILE.tar" ] && {
        lf -remote "send $id echo 'a file with this name already exists'"
        exit
    } || [ -d "$FILE.tar" ] && {
        lf -remote "send $id echo 'a directory with this name already exists'"
        exit
    }
    printf -- "$fx\n" | mkar -vimm -- "$FILE"
}}

cmd tar-gz-m ${{
    clear
    unset IFS
    FILE="$*"
    [ -z "$FILE" ] && lf -remote "send $id echo 'archive name required'" && exit
    [ -f "$FILE.tar.gz" ] && {
        lf -remote "send $id echo 'a file with this name already exists'"
        exit
    } || [ -d "$FILE.tar.gz" ] && {
        lf -remote "send $id echo 'a directory with this name already exists'"
        exit
    }
    printf -- "$fx\n" | mkar -vzimm -- "$FILE"
}}

cmd tar-bz-m ${{
    clear
    unset IFS
    FILE="$*"
    [ -z "$FILE" ] && lf -remote "send $id echo 'archive name required'" && exit
    [ -f "$FILE.tar.bz" ] && {
        lf -remote "send $id echo 'a file with this name already exists'"
        exit
    } || [ -d "$FILE.tar.bz" ] && {
        lf -remote "send $id echo 'a directory with this name already exists'"
        exit
    }
    printf -- "$fx\n" | mkar -vjimm -- "$FILE"
}}

cmd tar-xz-m ${{
    clear
    unset IFS
    FILE="$*"
    [ -z "$FILE" ] && lf -remote "send $id echo 'archive name required'" && exit
    [ -f "$FILE.tar.xz" ] && {
        lf -remote "send $id echo 'a file with this name already exists'"
        exit
    } || [ -d "$FILE.tar.xz" ] && {
        lf -remote "send $id echo 'a directory with this name already exists'"
        exit
    }
    printf -- "$fx\n" | mkar -vJimm -- "$FILE"
}}

cmd zip-m ${{
    clear
    unset IFS
    FILE="$*"
    [ -z "$FILE" ] && lf -remote "send $id echo 'archive name required'" && exit
    [ -f "$FILE.zip" ] && {
        lf -remote "send $id echo 'a file with this name already exists'"
        exit
    } || [ -d "$FILE.zip" ] && {
        lf -remote "send $id echo 'a directory with this name already exists'"
        exit
    }
    printf -- "$fx\n" | mkar -vZimm -- "$FILE"
}}

cmd rar-m ${{
    clear
    unset IFS
    FILE="$*"
    [ -z "$FILE" ] && lf -remote "send $id echo 'archive name required'" && exit
    [ -f "$FILE.rar" ] && {
        lf -remote "send $id echo 'a file with this name already exists'"
        exit
    } || [ -d "$FILE.rar" ] && {
        lf -remote "send $id echo 'a directory with this name already exists'"
        exit
    }
    printf -- "$fx\n" | mkar -vrimm -- "$FILE"
}}

cmd jar-m ${{
    clear
    unset IFS
    FILE="$*"
    [ -z "$FILE" ] && lf -remote "send $id echo 'archive name required'" && exit
    [ -f "$FILE.jar" ] && {
        lf -remote "send $id echo 'a file with this name already exists'"
        exit
    } || [ -d "$FILE.jar" ] && {
        lf -remote "send $id echo 'a directory with this name already exists'"
        exit
    }
    printf -- "$fx\n" | mkar -vRimm -- "$FILE"
}}

cmd 7z-m ${{
    clear
    unset IFS
    FILE="$*"
    [ -z "$FILE" ] && lf -remote "send $id echo 'archive name required'" && exit
    [ -f "$FILE.7z" ] && {
        lf -remote "send $id echo 'a file with this name already exists'"
        exit
    } || [ -d "$FILE.7z" ] && {
        lf -remote "send $id echo 'a directory with this name already exists'"
        exit
    }
    printf -- "$fx\n" | mkar -v7imm -- "$FILE"
}}


cmd extract ${{
    clear
    unset IFS
    FILE="$*"
    [ -n "$FILE" ] && {
        [ -f "$FILE" ] && {
            lf -remote "send $id echo 'a file with this name already exists'"
            exit
        } || [ -d "$FILE" -a -n "$(ls -A "$FILE" 2>&-)" ] && {
            lf -remote "send $id echo 'a non-empty directory with this name already exists'"
            exit
        }
        extract -v "$f" "$FILE"
    } || extract -v "$f"
}}

# Archive mappings
map t
map tct &{{
    selname="$(basename -- "$f")"
    parsed="$(printf -- "$selname" | sed 's/ /<space>/g')"
    lf -remote "send $id push :tar<space>$parsed"
}}
map tcz &{{
    selname="$(basename -- "$f")"
    parsed="$(printf -- "$selname" | sed 's/ /<space>/g')"
    lf -remote "send $id push :tar-gz<space>$parsed"
}}
map tcj &{{
    selname="$(basename -- "$f")"
    parsed="$(printf -- "$selname" | sed 's/ /<space>/g')"
    lf -remote "send $id push :tar-bz<space>$parsed"
}}
map tcJ &{{
    selname="$(basename -- "$f")"
    parsed="$(printf -- "$selname" | sed 's/ /<space>/g')"
    lf -remote "send $id push :tar-xz<space>$parsed"
}}
map tcZ &{{
    selname="$(basename -- "$f")"
    parsed="$(printf -- "$selname" | sed 's/ /<space>/g')"
    lf -remote "send $id push :zip<space>$parsed"
}}
map tcr &{{
    selname="$(basename -- "$f")"
    parsed="$(printf -- "$selname" | sed 's/ /<space>/g')"
    lf -remote "send $id push :rar<space>$parsed"
}}
map tcR &{{
    selname="$(basename -- "$f")"
    parsed="$(printf -- "$selname" | sed 's/ /<space>/g')"
    lf -remote "send $id push :jar<space>$parsed"
}}
map tc7 &{{
    selname="$(basename -- "$f")"
    parsed="$(printf -- "$selname" | sed 's/ /<space>/g')"
    lf -remote "send $id push :7z<space>$parsed"
}}
map tcmt &{{
    selname="$(basename -- "$f")"
    parsed="$(printf -- "$selname" | sed 's/ /<space>/g')"
    lf -remote "send $id push :tar-m<space>$parsed"
}}
map tcmz &{{
    selname="$(basename -- "$f")"
    parsed="$(printf -- "$selname" | sed 's/ /<space>/g')"
    lf -remote "send $id push :tar-gz-m<space>$parsed"
}}
map tcmj &{{
    selname="$(basename -- "$f")"
    parsed="$(printf -- "$selname" | sed 's/ /<space>/g')"
    lf -remote "send $id push :tar-bz-m<space>$parsed"
}}
map tcmJ &{{
    selname="$(basename -- "$f")"
    parsed="$(printf -- "$selname" | sed 's/ /<space>/g')"
    lf -remote "send $id push :tar-xz<space>$parsed"
}}
map tcmZ &{{
    selname="$(basename -- "$f")"
    parsed="$(printf -- "$selname" | sed 's/ /<space>/g')"
    lf -remote "send $id push :zip-m<space>$parsed"
}}
map tcmr &{{
    selname="$(basename -- "$f")"
    parsed="$(printf -- "$selname" | sed 's/ /<space>/g')"
    lf -remote "send $id push :rar-m<space>$parsed"
}}
map tcmR &{{
    selname="$(basename -- "$f")"
    parsed="$(printf -- "$selname" | sed 's/ /<space>/g')"
    lf -remote "send $id push :jar-m<space>$parsed"
}}
map tcm7 &{{
    selname="$(basename -- "$f")"
    parsed="$(printf -- "$selname" | sed 's/ /<space>/g')"
    lf -remote "send $id push :7z-m<space>$parsed"
}}
map te :push :extract<space>

# Generate directory shortcuts from jumplist
map c
map cd<enter> :cd ~
map cd/ :cd /
$"$HOME/.scripts/genlfjmp"
:source "/tmp/genlfjmp_maps"

